services:
  elasticsearch:
    # Elasticsearch service using the official image
    image: docker.elastic.co/elasticsearch/elasticsearch:8.1.2
    container_name: es-container
    environment:
      - discovery.type=single-node  # Runs Elasticsearch in single-node mode (no cluster)
      - xpack.security.enabled=false  # Disables security features like authentication
    networks:
      - es-net  # Connects Elasticsearch to the custom network
    ports:
      - "9200:9200"  # Exposes Elasticsearch on port 9200
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]  # Checks if Elasticsearch is running
      interval: 10s  # Runs the health check every 10 seconds
      retries: 5  # Retries up to 5 times before marking it unhealthy
      start_period: 20s  # Waits 20 seconds before starting the health check

  kibana:
    # Kibana service for visualizing Elasticsearch data
    container_name: kb-container
    image: docker.elastic.co/kibana/kibana:8.1.2
    environment:
      - ELASTICSEARCH_HOSTS=http://es-container:9200  # Connects Kibana to Elasticsearch
    networks:
      - es-net  # Connects Kibana to the custom network
    depends_on:
      elasticsearch:
        condition: service_healthy  # Ensures Elasticsearch is ready before starting Kibana
    ports:
      - 5601:5601  # Exposes Kibana on port 5601
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601"]  # Checks if Kibana is running
      interval: 10s
      retries: 5
      start_period: 30s  # Waits 30 seconds before starting the health check

  fastapi-app:
    # FastAPI application service
    build: ./FastApi  # Builds the FastAPI app from the specified directory
    container_name: fastapi-container
    depends_on:
      elasticsearch:
        condition: service_healthy  # Ensures Elasticsearch is ready before starting FastAPI
    networks:
      - es-net  # Connects FastAPI to the custom network
    ports:
      - "8000:8000"  # Exposes FastAPI on port 8000
    volumes:
      - ./models:/app/data  # Mounts the models directory into the container
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]  # Checks FastAPI health endpoint
      interval: 10s
      retries: 5
      start_period: 20s

  streaming:
    # Streaming service for retrieving data
    build: ./streaming  # Builds the streaming app from the specified directory
    container_name: streaming-container
    command: ["python", "./scripts/retrieval_script.py"]  # Runs the retrieval script
    depends_on:
      elasticsearch:
        condition: service_healthy  # Ensures Elasticsearch is ready before starting
      kibana:
        condition: service_healthy  # Ensures Kibana is ready before starting
    networks:
      - es-net  # Connects streaming service to the custom network

# Define a custom bridge network for communication between services
networks:
  es-net:
    driver: bridge